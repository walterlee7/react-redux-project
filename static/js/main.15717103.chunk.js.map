{"version":3,"sources":["components/intro.jsx","components/counter.js","components/App.js","serviceWorker.js","index.js"],"names":["Intro","react_default","a","createElement","className","Counter","increment","_this","props","dispatch","type","square","squareRoot","decrement","reset","multiply2","divide2","factorial","style","margin","this","count","onClick","id","React","Component","connect","state","initialState","store","createStore","arguments","length","undefined","action","console","log","Math","sqrt","factorialize","num","App","intro","es","counter","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15717103.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Intro() {\n    return (\n        <div>\n            <h2 className=\"intro\">\n                React with Redux\n            </h2>\n        </div>\n    );\n}\n\nexport default Intro;","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass Counter extends React.Component {\n\n    //increases counter by 1\n    increment = () => {\n        this.props.dispatch({ type: \"INCREMENT\" });\n    }\n\n    //squares the counter by 2\n    square = () => {\n        this.props.dispatch({ type: \"SQUARE\" });\n    }\n\n    //takes square root of counter\n    squareRoot = () => {\n        this.props.dispatch({ type: \"SQUARE-ROOT\" });\n    }\n\n    //decreases counter by 1\n    decrement = () => {\n        this.props.dispatch({ type: \"DECREMENT\" });\n    }\n\n    //resets counter to 0\n    reset = () => {\n        this.props.dispatch({ type: \"RESET\" });\n    }\n\n    //multiply counter by 2\n    multiply2 = () => {\n        this.props.dispatch({ type: \"MULTIPLY(2)\" });\n    }\n\n    //divide counter by 2\n    divide2 = () => {\n        this.props.dispatch({ type: \"DIVIDE(2)\" });\n    }\n\n    //factorizes the counter\n    factorial = () => {\n        this.props.dispatch({ type: \"FACTORIAL\" });\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Counter</h2>\n                <div style={{ margin: 10 }}>\n                    <span className=\"count\">{this.props.count}</span>\n                </div>\n                <div style={{ margin: 10 }}>\n                    <button onClick={this.decrement}>-1</button>\n                    <button id=\"add\" onClick={this.increment}>+1</button>\n                </div>\n                <div style={{ margin: 10 }}>\n                    <button onClick={this.multiply2}>x2</button>\n                    <button onClick={this.divide2}>/2</button>\n                    <button onClick={this.factorial}>Factorial</button>\n                </div>\n                <div style={{ margin: 10 }}>\n                    <button onClick={this.square}>Square(2)</button>\n                    <button onClick={this.squareRoot}>Square Root</button>\n                </div>\n                <div style={{ margin: 10 }}>\n                    <button onClick={this.reset}>Reset</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n//links redux state parent storage to child props\nfunction mapStateToProps(state) {\n    return {\n        count: state.count\n    };\n}\n\nexport default connect(mapStateToProps)(Counter);","import React from 'react';\nimport Intro from './intro';\nimport Counter from './counter';\nimport './App.css';\n\n//redux state storage\nimport { createStore } from 'redux';\n\n//element designation for state storage\nimport { Provider } from 'react-redux';\n\nconst initialState = {\n    count: 0\n};\n\n//declare state storage with the reducer method\nvar store = createStore(reducer);\n\nstore.dispatch({ type: \"INCREMENT\" });\nstore.dispatch({ type: \"INCREMENT\" });\nstore.dispatch({ type: \"DECREMENT\" });\nstore.dispatch({ type: \"MULTIPLY(2)\" });\nstore.dispatch({ type: \"DIVIDE(2)\" });\nstore.dispatch({ type: \"FACTORIAL\" });\nstore.dispatch({ type: \"SQUARE\" });\nstore.dispatch({ type: \"SQUARE-ROOT\" });\nstore.dispatch({ type: \"RESET\" });\n\nfunction reducer(state = initialState, action) {\n\n    console.log('reducer', state, action);\n\n    switch (action.type) {\n        case 'INCREMENT':\n            if (state.count <= 9999999) {\n                return {\n                    count: state.count + 1\n                }\n            } else {\n                return {\n                    count: \"Too Large\",\n                }\n            }\n        case 'SQUARE':\n            if (state.count <= 9999999) {\n                return {\n                    count: state.count * state.count\n                }\n            } else {\n                return {\n                    count: \"Too Large\",\n                }\n            }\n        case 'SQUARE-ROOT':\n            if (state.count <= 9999999) {\n                return {\n                    count: Math.sqrt(state.count)\n                }\n            } else {\n                return {\n                    count: \"Too Large\",\n                }\n            }\n        case 'DECREMENT':\n            if (state.count <= -9999999) {\n                return {\n                    count: state.count - 1\n                }\n            } else {\n                return {\n                    count: \"Too Large\",\n                }\n            }\n        case 'MULTIPLY(2)':\n            if (state.count <= 9999999 || state.count <= -9999999) {\n                return {\n                    count: state.count * 2\n                }\n            } else {\n                return {\n                    count: \"Too Large\",\n                }\n            }\n        case 'DIVIDE(2)':\n            if (state.count <= 9999999 || state.count <= -9999999) {\n                return {\n                    count: state.count / 2\n                }\n            } else {\n                return {\n                    count: \"Too Large\",\n                }\n            }\n        case 'FACTORIAL':\n            //recursive method to factorial the counter\n            function factorialize(num) {\n                if (num < 0)\n                    return -1;\n                else if (num === 0)\n                    return 1;\n                else {\n                    return (num * factorialize(num - 1));\n                }\n            }\n\n            if (state.count <= 9999999) {\n                return {\n                    count: factorialize(state.count)\n                }\n            } else {\n                return {\n                    count: \"Too Large\",\n                }\n            }\n        case 'RESET':\n            return {\n                count: 0\n            };\n        default:\n            return state;\n    }\n}\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Intro />\n            <Provider store={store}>\n                <Counter />\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}